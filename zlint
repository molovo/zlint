#!/usr/bin/env zsh

autoload -Uz crash && crash register
zmodload zsh/pcre

# Source the list of rules
typeset -a _zlint_rules
_zlint_rules=($(ls 'rules'))

###
# Format a list of errors and output them to the screen
###
function _zlint_report_errors() {
  local line="$1"
  integer width

  # Loop through each of the errors and add them to the list
  integer i=1
  for error in $errors; do
    # Set the width
    width=5

    # Format the line number and update the width
    formatted_line_no="\033[0;38;5;242m$line_no\033[0;m"
    width=$(( $width + ${#formatted_line_no} - ${#line_no} ))

    # Pad the left of the line number and print to screen
    printf '%*.*s' 0 ${#formatted_line_no} "$(printf '%0.1s' " "{1..$(( $width - ${#formatted_line_no} ))})"
    printf '%s' "$formatted_line_no"

    # Set the width
    width=60

    # Format the error message and update the width
    formatted_error=" \033[0;38;5;242mâ€¢\033[0;m $error"
    width=$(( $width + ${#formatted_error} - ${#error} ))

    # Truncate the error message to 50 characters
    if [[ ${#formatted_error} -gt ${width} ]]; then
      formatted_error="${formatted_error:0:$(( width - 5 ))}..."
    fi

    # Pad the right of the error message and print to screen
    printf '%s' "$formatted_error"
    printf '%*.*s' 0 ${#formatted_error} "$(printf '%0.1s' " "{1..$(( $width - ${#formatted_error} ))})"

    # Print the name of the rule which generated the message
    rule="${errored_rules[$i]}"
    printf '%s\n' "  \033[0;38;5;242m$rule\033[0;m"
    i=$(( i + 1 ))
  done
}

###
# Run a string through the list of enabled linters
###
function _zlint_process_string() {
  local line="$1" error
  typeset -ga errors
  typeset -ga errored_rules
  errors=()
  errored_rules=()

  line=$(echo $line | sed -e 's/^[ \t]*//')

  if [[ ${line:0:1} = "#" ]]; then
    return
  fi

  # Loop through the list of rules and run each one in turn,
  # appending any errors to the array
  for rule in $_zlint_rules; do
    output=$("_zlint_rule_$rule" "$line")
    if [[ $? -ne 0 ]]; then
      errors=($errors $output)
      errored_rules=($errored_rules $rule)
    fi
  done

  # If errors have been found
  if [[ ${#errors} -gt 0 ]]; then
    # Output the list of errors for the string/line
    _zlint_report_errors $line $errors
    return 1
  fi
}

###
# Run a file through the list of enabled linters line-by-line
###
function _zlint_run_file() {
  local file="$1" width=$(tput cols) state heading
  local -a lines
  local -a errors
  errors=()

  # Load the file contents into an array
  IFS=$'\n' lines=($(cat -e $file))
  line_no=1

  # Loop through each of the lines
  for line in "${(@f)lines[@]}"; do
    # Remove the trailing '$' character
    line=${line:0:(( ${#line} - 1 ))}

    # If the line is blank, skip ahead
    if [[ -z $line ]]; then
      line_no=$(( line_no + 1 ))
      continue
    fi

    # Run the line through the linters
    output=$(_zlint_process_string $line)
    state=$?

    # If errors have been found
    if [[ $state -ne 0 ]]; then
      # Increment the error count
      errors=($errors "$output")
    fi

    line_no=$(( line_no + 1 ))
  done

  # If errors have been found, return an error code
  if [[ ${#errors} -gt 0 ]]; then
    # Find the full filepath (if realpath is installed)
    if builtin type realpath >/dev/null 2>&1; then
      file=$(realpath $file)
      file=${file/$PWD\//}
    fi

    heading="\033[1;33m$file\033[0;m"
    printf '%s' "$heading"
    printf '%*.*s\n' 0 ${#heading} "$(printf '%0.1s' " "{1..$(( width - ${#heading} ))})"

    # Output the formatted list of errors
    echo "$errors"
    echo
    return 1
  fi
}

###
# Run the linter against the files passed as arguments
function _zlint_run() {
  local files=("$@")
  integer errors=0

  revolver start "Processing..."
  # Loop through each of the passed files, expanding globs
  for file in "${~files[@]}"; do
    revolver update "Processing file $file"

    # Run the file through the linters, and capture the output
    output=$(_zlint_run_file $file)

    # If errors are found
    if [[ $? -ne 0 ]]; then
      # Print the results to the screen
      echo "$output"
      echo

      # Incremement the error count
      errors=$(( errors + 1 ))
    fi

  done

  revolver stop

  if [[ ${#errors} -gt 0 ]]; then
    return 1
  fi

  echo '\033[0;32mNo errors found\033[0;m'
}

function _zlint() {
  local help version string ctx="$1" files="$@"

  zparseopts -D \
    h=help -help=help \
    v=version -version=version \
    s:=string -string:=string

  if [[ -n $help ]]; then
    _zlint_usage
    exit
  fi

  if [[ -n $version ]]; then
    echo '0.0.1'
    exit
  fi

  case $ctx in
    run )
      shift
      ;;
  esac

  for rule in $_zlint_rules; do
    source "rules/$rule"
  done

  if [[ -n $string ]]; then
    shift string
    _zlint_process_string $string
    state=$?
    crash unload
    return $state
  fi

  _zlint_run "$@"
  state=$?
  crash unload
  return $state
}

_zlint "$@"
